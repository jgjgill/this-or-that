// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String?
  posts         Post[]
  likes         Like[]
  commentLikes  CommentLike[]
  comments      Comment[]
  ReComment     ReComment[]
  votedPosts    Vote[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ReCommentLike ReCommentLike[]
}

model Post {
  id            Int         @id @default(autoincrement())
  title         String
  this          String
  that          String
  description   String      @db.LongText
  thisImagePath String?
  thatImagePath String?
  likes         Like[]
  comments      Comment[]
  ReComment     ReComment[]
  author        User        @relation(fields: [authorId], references: [id])
  authorId      Int
  voters        Vote[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Like {
  id         Int      @id @default(autoincrement())
  User       User     @relation(fields: [likeUserId], references: [id])
  likeUserId Int
  Post       Post     @relation(fields: [likePostId], references: [id], onDelete: Cascade)
  likePostId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CommentLike {
  id            Int      @id @default(autoincrement())
  User          User     @relation(fields: [likeUserId], references: [id])
  likeUserId    Int
  Comment       Comment  @relation(fields: [likeCommentId], references: [id], onDelete: Cascade)
  likeCommentId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ReCommentLike {
  id              Int       @id @default(autoincrement())
  User            User      @relation(fields: [likeUserId], references: [id])
  likeUserId      Int
  ReComment       ReComment @relation(fields: [likeReCommentId], references: [id], onDelete: Cascade)
  likeReCommentId Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Comment {
  id            Int           @id @default(autoincrement())
  content       String
  CommentLike   CommentLike[]
  ReComment     ReComment[]
  User          User          @relation(fields: [commentUserId], references: [id])
  commentUserId Int
  Post          Post          @relation(fields: [commentPostId], references: [id], onDelete: Cascade)
  commentPostId Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ReComment {
  id                 Int             @id @default(autoincrement())
  content            String
  ReCommentLike      ReCommentLike[]
  User               User            @relation(fields: [reCommentUserId], references: [id])
  reCommentUserId    Int
  Comment            Comment         @relation(fields: [reCommentCommentId], references: [id], onDelete: Cascade)
  reCommentCommentId Int
  Post               Post            @relation(fields: [reCommentPostId], references: [id], onDelete: Cascade)
  reCommentPostId    Int
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  imagePath String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([postId, userId])
}
